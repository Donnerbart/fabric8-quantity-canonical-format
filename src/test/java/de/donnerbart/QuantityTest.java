package de.donnerbart;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.assertj.core.api.Assertions.assertThat;

class QuantityTest {

    @ParameterizedTest
    @CsvSource({
            // zero
            "0.0000,0",
            "0.000,0",
            "0.00,0",
            "0.0,0",
            "0,0",
            "0e-4,0",
            "0e-3,0",
            "0e-2,0",
            "0e-1,0",
            "0e0,0",
            "0.0000n,0",
            "0.000n,0",
            "0.00n,0",
            "0.0n,0",
            "0n,0",
            "0.0000Ki,0",
            "0.000Ki,0",
            "0.00Ki,0",
            "0.0Ki,0",
            "0Ki,0",

            // decimal
            "0.0000001,1m",
            "0.000001,1m",
            "0.00001,1m",
            "0.0001,1m",
            "0.001,1m",
            "0.01,10m",
            "0.1,100m",
            "1,1",
            "10,10",
            "100,100",
            "1000,1k",
            "10000,10k",
            "100000,100k",
            "1000000,1M",
            "10000000,10M",
            "100000000,100M",
            "0.42,420m",
            "0.5,500m",
            "1.5,1500m",
            "2.0000000000000,2",
            "3.1410,3141m",
            "3.1411,3141m",
            "3.1412,3141m",
            "3.1413,3141m",
            "3.1414,3141m",
            "3.1415,3141m",
            "3.1416,3142m",
            "3.1417,3142m",
            "3.1418,3142m",
            "3.1419,3142m",
            "3.1420,3142m",
            "3.14159,3141m",
            "3.141592,3141m",

            // exponential (lowercase)
            "1e-8,1e-3",
            "1e-7,1e-3",
            "1e-6,1e-3",
            "1e-5,1e-3",
            "1e-4,1e-3",
            "1e-3,1e-3",
            "1e-2,10e-3",
            "1e-1,100e-3",
            "1e-0,1e-0",
            "1e0,1e0",
            "1e1,10",
            "1e2,100",
            "1e3,1e3",
            "1e4,10e3",
            "1e5,100e3",

            // exponential (uppercase)
            "1E-8,1e-3",
            "1E-7,1e-3",
            "1E-6,1e-3",
            "1E-5,1e-3",
            "1E-4,1e-3",
            "1E-3,1E-3",
            "1E-2,10e-3",
            "1E-1,100e-3",
            "1E-0,1E-0",
            "1E0,1E0",
            "1E1,10",
            "1E2,100",
            "1E3,1E3",
            "1E4,10e3",
            "1E5,100e3",

            // SI unit "n"
            "0.000001n,1m",
            "0.00001n,1m",
            "0.0001n,1m",
            "0.001n,1m",
            "0.01n,1m",
            "0.1n,1m",
            "1n,1m",
            "10n,1m",
            "100n,1m",
            "1000n,1m",
            "10000n,1m",
            "100000n,1m",
            "1000000n,1m",
            "10000000n,10m",
            "100000000n,100m",
            "1000000000n,1",
            "10000000000n,10",
            "100000000000n,100",
            "1000000000000n,1k",

            // SI unit "u"
            "0.000001u,1m",
            "0.00001u,1m",
            "0.0001u,1m",
            "0.001u,1m",
            "0.01u,1m",
            "0.1u,1m",
            "1u,1m",
            "10u,1m",
            "100u,1m",
            "1000u,1m",
            "10000u,10m",
            "100000u,100m",
            "1000000u,1",
            "999u,1m",
            "1001u,2m",
            "2000u,2m",
            "2001u,3m",
            "2999u,3m",

            // SI unit "m"
            "0.000001m,1m",
            "0.00001m,1m",
            "0.0001m,1m",
            "0.001m,1m",
            "0.01m,1m",
            "0.1m,1m",
            "1m,1m",
            "10m,10m",
            "100m,100m",
            "1000m,1",
            "10000m,10",
            "100000m,100",
            "1000000m,1k",
            "777m,777m",
            "1500m,1500m",
            "2342m,2342m",
            "102400m", "102400m",
            "1024000m", "1024",
            "1.0001m,2m",
            "1.001m,2m",
            "1.01m,2m",
            "1.1m,2m",
            "2.0m,2m",
            "2.1m,3m",

            // SI unit "G"
            "0.000001G,1k",
            "0.00001G,10k",
            "0.0001G,100k",
            "0.001G,1M",
            "0.01G,10M",
            "0.1G,100M",
            "1G,1G",
            "10G,1G",
            "100G,100G",
            "1000G,1T",
            "10000G,10T",
            "100000G,100T",
            "1000000G,1P",
            "1.5G,1500M",

            // binary unit "Ki"
            "0.000001Ki,2m",
            "0.000004Ki,5m",
            "0.00001Ki,11m",
            "0.00008Ki,82m",
            "0.0001Ki,103m",
            "0.00016Ki,164m",
            "0.001Ki,1024m",
            "0.0032Ki,3277m",
            "0.01Ki,10240m",
            "0.064Ki,65536m",
            "0.1Ki,102400m",
            "0.128Ki,131072m",
            "1Ki,1Ki",
            "10Ki,10Ki",
            "100Ki,100Ki",
            "256Ki,256Ki",
            "1000Ki,1000Ki",
            "1024Ki,1Mi",
            "10000Ki,10000Ki",
            "16384Ki,16Mi",
            "100000Ki,100000Ki",
            "131072Ki,128Mi",
            "1000000Ki,1000000Ki",
            "2097152Ki,2Gi",
            "0.42Ki,430080m",
            "0.5Ki,512",
            "1.024Ki,1048576m",
            "1.5Ki,1536",
            "3.1410Ki,3216384m",
            "3.1411Ki,3216487m",
            "3.1412Ki,3216589m",
            "3.1413Ki,3216692m",
            "3.1414Ki,3216794m",
            "3.1415Ki,3216896m",
            "3.1416Ki,3216999m",
            "3.1417Ki,3217101m",
            "3.1418Ki,3217204m",
            "3.1419Ki,3217306m",
            "3.1420Ki,3217408m",
            "3.14159Ki,3216989m",
            "3.141592Ki,3216991m",

            // binary unit "Ti"
            "0.000001Ti,1099511628m",
            "0.000004Ti,4398046512m",
            "0.00001Ti,10995116278m",
            "0.00008Ti,87960930223m",
            "0.0001Ti,109951162778m",
            "0.00016Ti,175921860445m",
            "0.001Ti,1099511627776m",
            "0.0032Ti,3518437208884m",
            "0.01Ti,10995116277760m",
            "0.064Ti,70368744177664m",
            "0.1Ti,109951162777600m",
            "0.128Ti,140737488355328m",
            "1Ti,1Ti",
            "10Ti,10Ti",
            "100Ti,100Ti",
            "256Ti,256Ti",
            "1000Ti,1000Ti",
            "1024Ti,1Pi",
            "10000Ti,10000Ti",
            "16384Ti,16Pi",
            "100000Ti,100000Ti",
            "131072Ti,128Pi",
            "1000000Ti,1000000Ti",
            "2097152Ti,2Ei",
            "0.42Ti,461794883665920m",
            "0.5Ti,512Gi",
            "1.024Ti,1125899906842624m",
            "1.5Ti,1536Gi",
            "3.1410Ti,3453566022844416m",
            "3.1411Ti,3453675974007194m",
            "3.1412Ti,3453785925169972m",
            "3.1413Ti,3453895876332749m",
            "3.1414Ti,3454005827495527m",
            "3.1415Ti,3454115778658304m",
            "3.1416Ti,3454225729821082m",
            "3.1417Ti,3454335680983860m",
            "3.1418Ti,3454445632146637m",
            "3.1419Ti,3454555583309415m",
            "3.1420Ti,3454665534472192m",
            "3.14159Ti,3454214734704804m",
            "3.141592Ti,3454216933728060m"})
    void convertResourcesQuantity(final String quantity, final String expectedCanonical) {
        assertCanonicalFormat(quantity, expectedCanonical);
    }

    private static void assertCanonicalFormat(final String quantity, final String expectedCanonical) {
        final Quantity expected = new Quantity(expectedCanonical);
        final Quantity actual = new Quantity(quantity).getCanonicalFormat(expected);
        assertThat(actual) //
                .as("%s -> %s (equality)", quantity, expectedCanonical) //
                .isEqualTo(expected);
        assertThat(actual.getAmount()) //
                .as("%s -> %s (amount)", quantity, expectedCanonical) //
                .isEqualTo(expected.getAmount());
        assertThat(actual.getFormat()) //
                .as("%s -> %s (format)", quantity, expectedCanonical) //
                .isEqualTo(expected.getFormat());
    }
}
